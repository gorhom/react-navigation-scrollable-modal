diff --git a/node_modules/@react-navigation/stack/src/views/Stack/Card.tsx b/node_modules/@react-navigation/stack/src/views/Stack/Card.tsx
index a013ff9..c99c5ab 100755
--- a/node_modules/@react-navigation/stack/src/views/Stack/Card.tsx
+++ b/node_modules/@react-navigation/stack/src/views/Stack/Card.tsx
@@ -89,6 +89,8 @@ const hasOpacityStyle = (style: any) => {
   return false;
 };
 
+export const CardContext = React.createContext(null)
+
 export default class Card extends React.Component<Props> {
   static defaultProps = {
     shadowEnabled: false,
@@ -303,8 +305,15 @@ export default class Card extends React.Component<Props> {
           gestureDirection === 'vertical-inverted'
         ) {
           distance = layout.height;
-          translation = nativeEvent.translationY;
-          velocity = nativeEvent.velocityY;
+          // translation = nativeEvent.translationY;
+          if(this.props.gesture._offset < 0) {
+            translation = this.props.gesture._offset - this.props.gesture._value;
+            velocity = nativeEvent.velocityY / 2;
+          }else{
+            translation = this.props.gesture._value;
+            velocity = nativeEvent.velocityY;
+          }
         } else {
           distance = layout.width;
           translation = nativeEvent.translationX;
@@ -392,7 +401,7 @@ export default class Card extends React.Component<Props> {
       return {
         maxDeltaX: 15,
         minOffsetY: 5,
-        hitSlop: { bottom: -layout.height + distance },
+        // hitSlop: { bottom: -layout.height + distance },
         enableTrackpadTwoFingerGesture,
       };
     } else if (gestureDirection === 'vertical-inverted') {
@@ -425,6 +434,7 @@ export default class Card extends React.Component<Props> {
   }
 
   private contentRef = React.createRef<View>();
+  private scrollableGestureRef = React.createRef<any>();
 
   render() {
     const {
@@ -526,10 +536,12 @@ export default class Card extends React.Component<Props> {
             style={[styles.container, containerStyle, customContainerStyle]}
             pointerEvents="box-none"
           >
+            <CardContext.Provider value={{ scrollableGestureRef: this.scrollableGestureRef, cardPanTranslateY: gesture }}>
             <PanGestureHandler
               enabled={layout.width !== 0 && gestureEnabled}
               onGestureEvent={handleGestureEvent}
               onHandlerStateChange={this.handleGestureStateChange}
+              simultaneousHandlers={this.scrollableGestureRef}
               {...this.gestureActivationCriteria()}
             >
               <Animated.View
@@ -563,6 +575,7 @@ export default class Card extends React.Component<Props> {
                 </CardSheet>
               </Animated.View>
             </PanGestureHandler>
+            </CardContext.Provider>
           </Animated.View>
         </View>
       </CardAnimationContext.Provider>
